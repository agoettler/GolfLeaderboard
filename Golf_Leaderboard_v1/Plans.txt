iOS App Development Fall 2016
Team Project Plans
Adam Gary, Andrew Goettler, Zach Meyer

Notes:
*	All interactions between the database and the app will be performed through dedicated objects. This design pattern isolates the database code from the model code, allowing for easier modification if the database structure is changed or, hypothetically, if the database were moved to a full-fledged web service such as Amazon.
??*	Many data structures used in the app will exist as objects on the phone and as dictionaries in the database; the dedicated objects handling the database-app interactions will retrieve the "dehydrated" data from the database and return objects to the local app, and vice versa.
??*	For some entities such as Players, it may be worthwhile to create a class which can reference players without retrieving all of the Player data from the database, but can return an actual Player object when needed - effectively a pointer to a Player in the database.

Proposed design changes, following discussion with Nick Wade:
*	We should switch to using Firebase Cloud Messaging with a Pub/Sub (publication/subscription) model for updating scores and player data. The Firebase realtime database may still work well for the list of golf courses.
*	It should be simple to implement authentication using a service like Google or Facebook; with Facebook, publshing the leaderboard to a user's Facebook wall could be a fairly simple feature to add.

Game Creation Process
1.	When a user selects the option to create a new event on their phone, a CourseListImporter object and a Event object are instantiated. At this point, the user becomes the "Event Owner".
2.	The CourseListImporter object retrieves a list of available courses from the database and returns a CourseList object to the app on the Event Owner's' phone. The CourseListImporter object can then disposed.
    -Done
3.	The CourseList object is used to populate the CreateEventViewController with the available courses.
    -Done
4.	As the Event Owner makes selections on the event creation screen, the properties of the Event object are modified accordingly.
    -Done
5.  At this point, the Event Owner can choose to create hole prizes for the event.
    -Done
7.	When the user completes the event creation process, a EventExporter object is instantiated.
    -Done
8.	The EventExporter object uploads the data from the Event object to the database. When this is complete, the GameExporter object can then be disposed.
9.	The Event Owner then begins the Player Setup Process.
    -Done

Game Joining Process
1.	When a user selects the option to find an existing event, a EventImporter object is instantiated on their phone. At this point, the user becomes a "Player".
    -Done
2.	The Player enters the name of a event they wish to join in the text box on the SearchEventViewController.
    -Done
3.	The EventImporter object searches the list of available events on the database to find a match for the name entered by the Player.
    -Done
4.	The user is informed if a match is found or not. If no match is found, or if the user chooses to search for a different event name, return to step 2.
    -Done
4.	If a match is found and the user chooses to join the event, the EventImporter object retrieves the data for the appropriate event and returns a Event object to the Player's phone (this event object will be global). The EventImporter object can then be disposed.
5.	The Player then begins the Player Setup Process.
    -Done

Player Setup Process
1.	When a Player or Game Owner proceeds to the Player Setup Process, a PlayerProfile object is instantiated on their phone.
2.	The PlayerName, Handicap, and StartHole properties of the PlayerProfile object are modified according to the Player's selections in the PlayerCreationViewController.
3.	The PlayerScoreCard property of the PlayerProfile object is instantiated and initialized using values from the PlayerProfile object and the Course property of the Player's Event object. The score values of the PlayerScoreCard are initialized to 0 or nil.
4.	A PlayerExporter object is created and used to add the Player data to a list of Players in the database. (Should updating the player's scorecard on the database be performed by a separate object?)
5.  At this point the Player proceeds to the ScoreEntryViewController and begins gameplay.



11/3/16
x  Merge GameCreation branch back into Master
x   Create ScoreCardEntry branch from master; implement scorecard and score entry, display scorecard
-   "Solidify" current codebase
x   Make sure most references to local player and event data use the singleton, rather than passing through prepare methods
-   Refactor EventImporter and EventExporter into a single class?



11/29/16: Post-alpha features
- Allow players to manually enter course data for courses not in the database
- Display scorecards from other players when a playername is selected from the leaderboard
- Allow a player to edit their score on any hole in the scoreboard
? Enable the database to purge game data after one week
o Disable main menu buttons until course data is completely loaded
    x Activity indicator displays
    - Allow proper multithreading with the activity indicator
x Make sure that the gross and net scores are always visible on the scoreboard
    x Reduced scorecard column widths
    x Removed gross score column, net score column relabeld as score
    x Net score is displayed with one or two dots when the player received a stroke or two strokes on that hole
x Limit player names to alphanumeric characters
